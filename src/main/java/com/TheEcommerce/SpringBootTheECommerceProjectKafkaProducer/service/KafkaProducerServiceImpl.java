package com.TheEcommerce.SpringBootTheECommerceProjectKafkaProducer.service;

import com.TheEcommerce.SpringBootTheECommerceProjectKafkaProducer.model.orderservices.OrderService;
import com.TheEcommerce.SpringBootTheECommerceProjectKafkaProducer.model.paymentbroker.PaymentBroker;
import com.TheEcommerce.SpringBootTheECommerceProjectKafkaProducer.processor.CsvProcessor;
import com.TheEcommerce.SpringBootTheECommerceProjectKafkaProducer.processor.FileProcessorService;
import com.fasterxml.jackson.core.JsonProcessingException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
@RequiredArgsConstructor
@Slf4j
public class KafkaProducerServiceImpl implements KafkaProducerService {

    private final  KafkaService kafkaService;

    private final CsvProcessor csvProcessor;

    private final FileProcessorService fileProcessorService;

    @Override
    public void processCsvData() {
        kafkaService.publishCsvData(
                csvProcessor.process());
    }

    @Override
    public void processOrderServicesFiles() {
        try {
        //log.info("ProductService:createNewProduct execution started.");
        List<String> stringsList = fileProcessorService.listFiles("src/main/resources/OrderServices");
        //log.debug("ProductService:createNewProduct request parameters {}", ValueMapper.jsonAsString(productRequestDTO));
        kafkaService.publishOrderServicesFiles(stringsList);
        //log.debug("ProductService:createNewProduct received response from Database {}", ValueMapper.jsonAsString(productRequestDTO));
        } catch (Exception ex) {
            //log.error("Exception occurred while persisting product to database , Exception message {}", ex.getMessage());
            //throw new ProductServiceBusinessException("Exception occurred while create a new product");
        }
        //log.info("ProductService:createNewProduct execution ended.");
    }

    @Override
    public void processPaymentBrokerFiles() {

    }

    @Override
    public void processAutoGenerateFiles(Integer numberOfOrders) throws JsonProcessingException {

        List<OrderService> orderServiceList = fileProcessorService.autoGenerateOrderServicesFiles(numberOfOrders);
        System.out.println("orderServiceList: " + orderServiceList.size());
        kafkaService.publishAutoGeneratedOrderServices(orderServiceList);

        List<PaymentBroker> paymentBrokerList = fileProcessorService.autoGeneratePaymentBrokerFiles(orderServiceList);
        System.out.println("paymentBrokerList: " + paymentBrokerList.size());
        kafkaService.publishAutoGeneratedPaymentBroker(paymentBrokerList);
    }


}
